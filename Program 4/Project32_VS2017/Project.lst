Microsoft (R) Macro Assembler Version 14.16.27026.1	    02/06/19 21:42:47
*Composite Numbers     (program4_elsom.asm		     Page 1 - 1


				TITLE Composite Numbers     (program4_elsom.asm)

				; Author: Robert Elsom
				; Last Modified: 2/6/2019
				; OSU email address: elsomr@oregonstate.edu	
				; Course number/section: 271-400
				; Project Number: 4                Due Date: 2/18/2018
				; Description: Gets user input on how many composite numbers between 1 
				;				and 400 to display, then outputs that number of composites
				;				in aligned columns, 10 numbers per line with atleast 3 spaces
				;				seperating them

				;Implementation Notes:
				;	This program is implemented using procedures.
				;	All variables are global, no parameters are passed




				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.const
 00000000 00000190		upperLimit			DWORD	400
 00000004 00000001		lowerLimit			DWORD	1

 00000000			.data
 00000000 43 6F 6D 70 6F	titlePrmpt			BYTE	"Composite Numbers         by Robert Elsom",0
	   73 69 74 65 20
	   4E 75 6D 62 65
	   72 73 20 20 20
	   20 20 20 20 20
	   20 62 79 20 52
	   6F 62 65 72 74
	   20 45 6C 73 6F
	   6D 00
 0000002A 2A 2A 45 43 3A	ecPrompt			BYTE	"**EC: Align the output columns",0
	   20 41 6C 69 67
	   6E 20 74 68 65
	   20 6F 75 74 70
	   75 74 20 63 6F
	   6C 75 6D 6E 73
	   00
 00000049 2A 2A 45 43 3A	ecPrompt2			BYTE	"**EC: Only check against prime divisors",0
	   20 4F 6E 6C 79
	   20 63 68 65 63
	   6B 20 61 67 61
	   69 6E 73 74 20
	   70 72 69 6D 65
	   20 64 69 76 69
	   73 6F 72 73 00
 00000071 45 6E 74 65 72	userInstructPrmpt	BYTE	"Enter the number of composite numbers you would like to see.",0
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   63 6F 6D 70 6F
	   73 69 74 65 20
	   6E 75 6D 62 65
	   72 73 20 79 6F
	   75 20 77 6F 75
	   6C 64 20 6C 69
	   6B 65 20 74 6F
	   20 73 65 65 2E
	   00
 000000AE 49 27 6C 6C 20	userInstructPrmpt2	BYTE	"I'll accept any number for up to 400 composites.",0
	   61 63 63 65 70
	   74 20 61 6E 79
	   20 6E 75 6D 62
	   65 72 20 66 6F
	   72 20 75 70 20
	   74 6F 20 34 30
	   30 20 63 6F 6D
	   70 6F 73 69 74
	   65 73 2E 00
 000000DF 45 6E 74 65 72	userInputPrmpt		BYTE	"Enter the number of composites to be displayed [1...400]: ",0
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   63 6F 6D 70 6F
	   73 69 74 65 73
	   20 74 6F 20 62
	   65 20 64 69 73
	   70 6C 61 79 65
	   64 20 5B 31 2E
	   2E 2E 34 30 30
	   5D 3A 20 00
 0000011A 53 6F 72 72 79	invalidInputPrmpt	BYTE	"Sorry, out of range. Try again.",0
	   2C 20 6F 75 74
	   20 6F 66 20 72
	   61 6E 67 65 2E
	   20 54 72 79 20
	   61 67 61 69 6E
	   2E 00
 0000013A 00000000		numberOfComposites	DWORD	?
 0000013E 52 65 73 75 6C	goodByePrmpt		BYTE	"Results certified by Robert Elsom. Good-Bye.",0
	   74 73 20 63 65
	   72 74 69 66 69
	   65 64 20 62 79
	   20 52 6F 62 65
	   72 74 20 45 6C
	   73 6F 6D 2E 20
	   47 6F 6F 64 2D
	   42 79 65 2E 00

				;only need array size 100 to cover first 400 composites
 0000016B  00000064 [		primeArr			DWORD	100 DUP(2)
	    00000002
	   ]
				;contains first two number to start checking for primes
 000002FB 00000002		startPrimeArr		DWORD	2,3
	   00000003
 00000303 00000000		arrayCounter		DWORD	0
 00000307 FFFFFFFF		compositeCounter	DWORD	-1
 0000030B 00000004		compositeNumber		DWORD	4
 0000030F 00000000		userNumber			DWORD	?
 00000313 20 00			spaceSym			BYTE	20h,0
 00000315 00000000		compositeFlag		DWORD	0
 00000319 00000000		tempCount			DWORD	?
 0000031D 00000006		numOfSpaces			DWORD	6


 00000000			.code
 00000000			main PROC
 00000000  E8 0000001B			call	introduction
 00000005			invalidNumber:
 00000005  E8 0000006C			call	getUserData
 0000000A  E8 000000B2			call	fillPrimeArray
 0000000F  E8 000000CF			call	showComposites
 00000014  E8 000001B4			call	farewell


					exit
 00000019  6A 00	   *	    push   +000000000h
 0000001B  E8 00000000 E   *	    call   ExitProcess
 00000020			main ENDP

				;-------------------------------------------------------------
				;		INTRODUCTION Procedure
				;Procedure to display welcome message, extra credit and instructions to user
				;Recieves: titlePrmpt, userInstructPrmpt, and userInstructPrmpt2
				;			are global variables
				;Returns: None
				;Preconditions: None
				;Registers changed: edx
				;--------------------------------------------------------------

 00000020			introduction	PROC

				;display title
 00000020  BA 00000000 R		mov		edx, OFFSET titlePrmpt
 00000025  E8 00000000 E		call	WriteString
 0000002A  E8 00000000 E		call	CrLf
 0000002F  BA 0000002A R		mov		edx, OFFSET ecPrompt
 00000034  E8 00000000 E		call	WriteString
 00000039  E8 00000000 E		call	CrLf
 0000003E  BA 00000049 R		mov		edx, OFFSET ecPrompt2
 00000043  E8 00000000 E		call	WriteString
 00000048  E8 00000000 E		call	CrLf
 0000004D  E8 00000000 E		call	CrLf

				;display user instructions
 00000052  BA 00000071 R		mov		edx, OFFSET userInstructPrmpt
 00000057  E8 00000000 E		call	WriteString
 0000005C  E8 00000000 E		call	CrLf
 00000061  BA 000000AE R		mov		edx, OFFSET userInstructPrmpt2
 00000066  E8 00000000 E		call	WriteString
 0000006B  E8 00000000 E		call	CrLf
 00000070  E8 00000000 E		call	CrLf

 00000075  C3				ret
 00000076			introduction	ENDP

				;-------------------------------------------------------------
				;		GETUSERDATA Procedure
				;Displays input instructions and user inputs a number between 1 and 400
				;Recieves: userInputPrompt and compositeNumber are global variables
				;Returns: global compositeNumber = user input
				;Preconditions: None
				;Registers changed: edx, eax
				;--------------------------------------------------------------

 00000076			getUserData		PROC

					;display input message
 00000076  BA 000000DF R		mov		edx, OFFSET userInputPrmpt
 0000007B  E8 00000000 E		call	WriteString

					;get input
 00000080  E8 00000000 E		call	ReadInt
 00000085  A3 0000030F R		mov		userNumber, eax
					
					;validate input
 0000008A  E8 00000001			call		validate
					
 0000008F  C3				ret
 00000090			getUserData		ENDP

				;-------------------------------------------------------------
				;		VALIDATE Procedure
				;Procedure to validate user input is between 1 and 400
				;Recieves: compositeNumber and invalidInputPrmpt are global variables
				;Returns: returns nothing if input was valid, else recalls getUserData to try again
				;Preconditions: user has inputted a number in compositeNumber
				;Registers changed: edx, eax
				;--------------------------------------------------------------
 00000090			validate		PROC

					;jmp to compare input to limits before calling getUserData
 00000090  EB 14			jmp		continueValidation

				;displays error and recalls for user to input data
 00000092			notValid:
 00000092  BA 0000011A R		mov		edx, OFFSET invalidInputPrmpt
 00000097  E8 00000000 E		call	WriteString
 0000009C  E8 00000000 E		call	CrLf
 000000A1  E8 FFFFFFD0			call	getUserData

 000000A6			continueValidation:

					;check if user input is greater than or eq to lower limit
					;if not, jump to not valid
 000000A6  A1 0000030F R		mov		eax, userNumber
 000000AB  3B 05 00000004 R		cmp		eax, lowerLimit
 000000B1  7C DF			jl		notValid

					;check if user input is less than or eq to upper limit
					;if not, jump to not valid
 000000B3  A1 0000030F R		mov		eax, userNumber
 000000B8  3B 05 00000000 R		cmp		eax, upperLimit
 000000BE  7F D2			jg		notValid

 000000C0  C3				ret
 000000C1			validate		ENDP

				;-------------------------------------------------------------
				;		FILLPRIMEARRAY Procedure
				;Procedure to fill in prime array with first two primes from startPrimeArray
				;Recieves: primeArr and startPrimeArr are global variables
				;Returns: primeArr with first two values set to 2 and 3
				;Preconditions: None
				;Registers changed: esi, edi, ecx
				;--------------------------------------------------------------
				;found help at https://stackoverflow.com/questions/26132914/arrays-in-masm-assembly-very-confused-beginner

 000000C1			fillPrimeArray		PROC
 000000C1  BF 000002FB R		mov		edi, OFFSET startPrimeArr
 000000C6  BE 0000016B R		mov		esi, OFFSET primeArr
 000000CB  B9 00000000			mov		ecx, 0

 000000D0			Fill:
					;move value from startPrime into eax
 000000D0  8B 04 8F			mov		eax, [edi + ecx * 4]
					;move eax into primeArr
 000000D3  89 04 8E			mov		[esi + ecx * 4], eax
 000000D6  41				inc		ecx
 000000D7  FF 05 00000303 R		inc		arrayCounter
 000000DD  83 F9 02			cmp		ecx, LENGTHOF startPrimeArr
 000000E0  7C EE			jl		Fill

 000000E2  C3				ret
 000000E3			fillPrimeArray		ENDP



				;-------------------------------------------------------------
				;		SHOWCOMPOSITES Procedure
				;Procedure to output the number of composites up to the user input
				;Recieves: compositeCounter, numOfSpaces, and compositeNumber are global variables
				;Returns: Nothing
				;Preconditions: None
				;Registers changed: eax, ebx, ecx, edx, 
				;--------------------------------------------------------------
 000000E3			showComposites	PROC
					
 000000E3  8B 0D 0000030F R		mov		ecx, userNumber

					;calls isComposite to get if number is composite,
					;then outputs display with formatted number of spaces
					;and continues looping until reaching user inputted number
 000000E9			CompositeLoop:
 000000E9  89 0D 00000319 R		mov		tempCount, ecx
					;test if number is composite
 000000EF  E8 00000085			call	isComposite
					;if not composite skip to isPrimeNum
 000000F4  83 3D 00000315 R		cmp		compositeFlag, 0
	   00
 000000FB  74 41			je		isPrimeNum
 000000FD  FF 05 00000307 R		inc		compositeCounter
					;new line if ten terms are printed
 00000103  A1 00000307 R		mov		eax, compositeCounter
 00000108  33 D2			xor		edx, edx
 0000010A  BB 0000000A			mov		ebx, 10
 0000010F  F7 F3			div		ebx
 00000111  83 FA 00			cmp		edx, 0
 00000114  75 05			jne		sameLine
 00000116  E8 00000000 E		call	CrLf

 0000011B			sameLine:
 0000011B  E8 00000033			call	formattedOutput
 00000120  8B 0D 0000031D R		mov		ecx, numOfSpaces
					;print number of spaces to format output
 00000126			SpaceLoop:
 00000126  BA 00000313 R		mov		edx, OFFSET spaceSym
 0000012B  E8 00000000 E		call	WriteString
 00000130  E2 F4			loop	SpaceLoop
					
 00000132  A1 0000030B R		mov		eax, compositeNumber
 00000137  E8 00000000 E		call	WriteDec
 0000013C  EB 06			jmp		endLoop

 0000013E			isPrimeNum:
					;make sure this loop does not count towards number of composites
 0000013E  FF 05 00000319 R		inc		tempCount
					
 00000144			endLoop:
 00000144  FF 05 0000030B R		inc		compositeNumber
 0000014A  8B 0D 00000319 R		mov		ecx, tempCount
 00000150  E2 97			loop	CompositeLoop

 00000152  C3				ret
 00000153			showComposites	ENDP

				;-------------------------------------------------------------
				;		FORMATTEDOUTPUT Procedure
				;Procedure to format output to the screen
				;Recieves: compositeNumber is a global variable
				;Returns: numOfSpaces as a global variable
				;Preconditions: non
				;Registers changed: eax
				;--------------------------------------------------------------

 00000153			formattedOutput	PROC
					;reset numOfSpaces
 00000153  C7 05 0000031D R		mov		numOfSpaces, 6
	   00000006
 0000015D  A1 0000030B R		mov		eax, compositeNumber
 00000162  83 F8 64			cmp		eax, 100
 00000165  7C 06			jl		fiveSpaces
 00000167  FF 0D 0000031D R		dec		numOfSpaces
 0000016D			fiveSpaces:
 0000016D  83 F8 0A			cmp		eax, 10
 00000170  7C 06			jl		sixSpaces
 00000172  FF 0D 0000031D R		dec		numOfSpaces
 00000178			sixSpaces:

 00000178  C3				ret
 00000179			formattedOutput	ENDP

				;-------------------------------------------------------------
				;		ISCOMPOSITE Procedure
				;Procedure to validate a test number is composite
				;Recieves: primeArr, arrayCounter, compositeFlac are global variables
				;Returns: Composite flag set to true if compositeNumber is composite
				;Preconditions: none
				;Registers changed: eax, edx, ebx, esi
				;--------------------------------------------------------------

 00000179			isComposite		PROC
					;set composite flag to 0	
 00000179  B8 00000000			mov		eax, 0
 0000017E  A3 00000315 R		mov		compositeFlag, eax

					;compares number to array of primes to make sure it is divisible by a prime number
 00000183  BE 0000016B R		mov		esi, OFFSET primeArr
 00000188  8B 0D 00000303 R		mov		ecx, arrayCounter
 0000018E			compareLoop:
					;divide number by primes in primeArr, if any number divides evenly, set flag to one
 0000018E  A1 0000030B R		mov		eax, compositeNumber
 00000193  33 D2			xor		edx, edx
 00000195  8B 1C 8E			mov		ebx, [esi + ecx * 4]
 00000198  F7 F3			div		ebx
 0000019A  83 FA 00			cmp		edx, 0
 0000019D  74 09			je		passedComposite
 0000019F  E2 ED			loop	compareLoop
					;if finished loop and no number was able to divide into number
 000001A1  E8 0000000D			call	addPrime
 000001A6  EB 0A			jmp		isPrimeNumber

 000001A8			passedComposite:
					;set compositeFlag to true
 000001A8  C7 05 00000315 R		mov		compositeFlag, 1
	   00000001

				;skips setting composite flag if number is prime
 000001B2			isPrimeNumber:
 000001B2  C3				ret
 000001B3			isComposite		ENDP

				;-------------------------------------------------------------
				;		ADDPRIME Procedure
				;Procedure to add prime into primeArr if number is not composite
				;Recieves: compositeNumber and primeArr are global variables
				;Returns: primeArr with one new number added
				;Preconditions: compositeNumber is not composite
				;Registers changed: esi, eax, ecx
				;--------------------------------------------------------------

 000001B3			addPrime		PROC
					;store new prime into primeArr
 000001B3  BE 0000016B R		mov		esi, OFFSET primeArr
 000001B8  8B 0D 00000303 R		mov		ecx, arrayCounter
 000001BE  A1 0000030B R		mov		eax, compositeNumber
 000001C3  89 04 8E			mov		[esi + ecx * 4], eax
 000001C6  FF 05 00000303 R		inc		arrayCounter

 000001CC  C3				ret
 000001CD			addPrime		ENDP


				;-------------------------------------------------------------
				;		FAREWELL Procedure
				;Procedure to display good-bye message to user
				;Recieves: goodByePrmpt is a global variable
				;Returns: None
				;Preconditions: None 
				;Registers changed: edx
				;--------------------------------------------------------------

 000001CD			farewell		PROC
					;print good bye message
 000001CD  E8 00000000 E		call	CrLf
 000001D2  E8 00000000 E		call	CrLf
 000001D7  BA 0000013E R		mov		edx, OFFSET goodByePrmpt
 000001DC  E8 00000000 E		call	WriteString
 000001E1  E8 00000000 E		call	CrLf

 000001E6  C3				ret
 000001E7			farewell		ENDP


				END main
Microsoft (R) Macro Assembler Version 14.16.27026.1	    02/06/19 21:42:47
*Composite Numbers     (program4_elsom.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CONST  . . . . . . . . . . . . .	32 Bit	 00000008 Para	  Public  'CONST'	 ReadOnly
FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000321 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001E7 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
addPrime . . . . . . . . . . . .	P Near	 000001B3 _TEXT	Length= 0000001A Public STDCALL
farewell . . . . . . . . . . . .	P Near	 000001CD _TEXT	Length= 0000001A Public STDCALL
fillPrimeArray . . . . . . . . .	P Near	 000000C1 _TEXT	Length= 00000022 Public STDCALL
  Fill . . . . . . . . . . . . .	L Near	 000000D0 _TEXT	
formattedOutput  . . . . . . . .	P Near	 00000153 _TEXT	Length= 00000026 Public STDCALL
  fiveSpaces . . . . . . . . . .	L Near	 0000016D _TEXT	
  sixSpaces  . . . . . . . . . .	L Near	 00000178 _TEXT	
getUserData  . . . . . . . . . .	P Near	 00000076 _TEXT	Length= 0000001A Public STDCALL
introduction . . . . . . . . . .	P Near	 00000020 _TEXT	Length= 00000056 Public STDCALL
isComposite  . . . . . . . . . .	P Near	 00000179 _TEXT	Length= 0000003A Public STDCALL
  compareLoop  . . . . . . . . .	L Near	 0000018E _TEXT	
  passedComposite  . . . . . . .	L Near	 000001A8 _TEXT	
  isPrimeNumber  . . . . . . . .	L Near	 000001B2 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000020 Public STDCALL
  invalidNumber  . . . . . . . .	L Near	 00000005 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showComposites . . . . . . . . .	P Near	 000000E3 _TEXT	Length= 00000070 Public STDCALL
  CompositeLoop  . . . . . . . .	L Near	 000000E9 _TEXT	
  sameLine . . . . . . . . . . .	L Near	 0000011B _TEXT	
  SpaceLoop  . . . . . . . . . .	L Near	 00000126 _TEXT	
  isPrimeNum . . . . . . . . . .	L Near	 0000013E _TEXT	
  endLoop  . . . . . . . . . . .	L Near	 00000144 _TEXT	
validate . . . . . . . . . . . .	P Near	 00000090 _TEXT	Length= 00000031 Public STDCALL
  notValid . . . . . . . . . . .	L Near	 00000092 _TEXT	
  continueValidation . . . . . .	L Near	 000000A6 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayCounter . . . . . . . . . .	DWord	 00000303 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
compositeCounter . . . . . . . .	DWord	 00000307 _DATA	
compositeFlag  . . . . . . . . .	DWord	 00000315 _DATA	
compositeNumber  . . . . . . . .	DWord	 0000030B _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
ecPrompt2  . . . . . . . . . . .	Byte	 00000049 _DATA	
ecPrompt . . . . . . . . . . . .	Byte	 0000002A _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodByePrmpt . . . . . . . . . .	Byte	 0000013E _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
invalidInputPrmpt  . . . . . . .	Byte	 0000011A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lowerLimit . . . . . . . . . . .	DWord	 00000004 CONST	
magenta  . . . . . . . . . . . .	Number	 00000005h   
numOfSpaces  . . . . . . . . . .	DWord	 0000031D _DATA	
numberOfComposites . . . . . . .	DWord	 0000013A _DATA	
primeArr . . . . . . . . . . . .	DWord	 0000016B _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
spaceSym . . . . . . . . . . . .	Byte	 00000313 _DATA	
startPrimeArr  . . . . . . . . .	DWord	 000002FB _DATA	
tempCount  . . . . . . . . . . .	DWord	 00000319 _DATA	
titlePrmpt . . . . . . . . . . .	Byte	 00000000 _DATA	
upperLimit . . . . . . . . . . .	DWord	 00000000 CONST	
userInputPrmpt . . . . . . . . .	Byte	 000000DF _DATA	
userInstructPrmpt2 . . . . . . .	Byte	 000000AE _DATA	
userInstructPrmpt  . . . . . . .	Byte	 00000071 _DATA	
userNumber . . . . . . . . . . .	DWord	 0000030F _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
